ll := import("@platforma-sdk/workflow-tengo:ll")
wf := import("@platforma-sdk/workflow-tengo:workflow")
smart := import("@platforma-sdk/workflow-tengo:smart")
file := import("@platforma-sdk/workflow-tengo:file")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pFrames := import("@platforma-sdk/workflow-tengo:pframes")

util := import(":util")
annotations := import(":annotations")
annotationsStats := import(":annotations-stats")

exportTableTpl := assets.importTemplate(":export-table")

wf.prepare(func(args) {
	return {
		columnBundle: util.createColumnBundle(args)
	}
})

wf.body(func(args) {
	outputs := {}
	exports := {}

	// Export TSVs

	if (!is_undefined(args.inputAnchor)) {
		bundleBuilderForExport := wf.createPBundleBuilder()
		bundleBuilderForExport.addAnchor("main", args.inputAnchor)
		bundleBuilderForExport.addMulti({ axes: [{ anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }] }, "perSample")
		bundleBuilderForExport.addMulti({ axes: [{ anchor: "main", idx: 1 }] }, "perClonotype")
		bundleBuilderForExport.addSingle({ name: "pl7.app/label", axes: [{ anchor: "main", idx: 0 }] }, "sampleLabels")
		exportResult := render.createEphemeral(exportTableTpl, {
			columnBundle: bundleBuilderForExport.build()
		})

		outputs["tsvZip"] = exportResult.output("tsvZip")
	}
	
	// Annotations computation

	annotationSpec := args.annotationSpec
	annotationAxesSpec := util.getAnnotationAxesSpec(args)

	if !is_undefined(annotationAxesSpec) && len(annotationSpec.steps) > 0 {
		computedAnnotations := annotations.computeClonotypeAnnotations({
			title: annotationSpec.title,
			steps: annotationSpec.steps,
			inputAnchor: args.inputAnchor,
			annotationAxesSpec: annotationAxesSpec,
			shouldComputeFilters: false
		})

		outputs["annotationPf"] = pFrames.exportFrame(computedAnnotations.annotationPf)

		computedStats := annotationsStats.computeClonotypeAnnotationsStats({
			inputAnchor: args.inputAnchor,
			annotation: computedAnnotations.annotationColumn,
			columnBundle: args.columnBundle
		})

		outputs["sampleStatsPf"] = pFrames.exportFrame(computedStats.sampleStatsPf)
		outputs["annotationStatsPf"] = pFrames.exportFrame(computedStats.annotationStatsPf)
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
