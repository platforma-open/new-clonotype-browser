rand := import("rand")
json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")
smart := import("@platforma-sdk/workflow-tengo:smart")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
pBundle := import("@platforma-sdk/workflow-tengo:pframes.bundle")
sets := import("@platforma-sdk/workflow-tengo:sets")
maps := import("@platforma-sdk/workflow-tengo:maps")
slices := import("@platforma-sdk/workflow-tengo:slices")
strings := import("@platforma-sdk/workflow-tengo:strings")
canonical := import("@platforma-sdk/workflow-tengo:canonical")
annotations := import("@platforma-sdk/workflow-tengo:annotations")

mainFractionColumn := {
	axes: [
		{ anchor: "main", idx: 0 },
		{ anchor: "main", idx: 1 }
	],
	annotations: {
		"pl7.app/isAbundance": "true",
		"pl7.app/abundance/normalized": "true",
		"pl7.app/abundance/isPrimary": "true"
	}
}

mainCountColumn := {
	axes: [
		{ anchor: "main", idx: 0 },
		{ anchor: "main", idx: 1 }
	],
	annotations: {
		"pl7.app/isAbundance": "true",
		"pl7.app/abundance/normalized": "false",
		"pl7.app/abundance/isPrimary": "true"
	}
}

createColumnBundle := func(wf, args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.inputAnchor)

	expressions := slices.map(args.annotationSpecs.specs, func(step) { return step.expression })
	columns := annotations.extractColumnsFromExpressions(expressions)

	for column in columns {
		bundleBuilder.addById(column)
	}

	bundleBuilder.addById(mainFractionColumn)
	bundleBuilder.addById(mainCountColumn)
	return bundleBuilder.build()
}

export ll.toStrict({
	mainCountColumn: mainCountColumn,
	mainFractionColumn: mainFractionColumn,
	createColumnBundle: createColumnBundle
})
